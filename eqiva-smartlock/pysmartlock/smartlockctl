#!/usr/bin/env python3
import logging
#logging.basicConfig(level='DEBUG', format='%(asctime)s | %(levelname)s\t %(message)s')
#logging.info("aaa")

from binascii import hexlify, unhexlify
from command import *
from fragmentation import Defragmenter, fragment_command
from cryptomgr import CryptoMgr, parse_pairing_code
import configparser, argparse, sys

EXITCODE_SUCCESS=0
EXITCODE_UNKNOWN=1
EXITCODE_DISCONNECT_WITHOUT_ACTION=2
EXITCODE_CONNECT_FAILED=3
EXITCODE_TIMEOUT=4
EXITCODE_PAIRING_FAILED=5

exitcode=EXITCODE_UNKNOWN

parser = argparse.ArgumentParser(description='Communicate with eqiva smartlock.')
parser.add_argument('-P', '--pair', metavar='QRDATA',
                    help='contents of the QR code from the key card')
parser.add_argument('-a', '--adapter', default='hci0',
                    help='bluetooth adapter name')
parser.add_argument('--timeout', default='10', type=float,
                    help='timeout in seconds')
parser.add_argument('-L', '--lock', action="store_true",
                    help='lock the door')
parser.add_argument('-U', '--unlock', action="store_true",
                    help='unlock the door')
parser.add_argument('-O', '--open', action="store_true",
                    help='open the door')
parser.add_argument('-S', '--status', action="store_true",
                    help='request status information')
parser.add_argument('--user-list', action="store_true",
                    help='request user list')
parser.add_argument('--status-interval', type=int, default=0,
                    help='request status information periodically')
parser.add_argument('--send-raw',
                    help='send raw packet')
parser.add_argument('-v', '--verbose', action="store_true",
                    help='display debug info')
parser.add_argument('-n', '--notify', action="store_true",
                    help="dont quit after receiving statusinfo, but keep notifying of new statuses")
args = parser.parse_args()
logging.basicConfig(level='DEBUG' if args.verbose else 'INFO', format='%(asctime)s | %(levelname)s\t %(message)s')
logging.debug("Logging started")

import gatt
from gi.repository import GObject

logging.debug("BT library loaded")

config = configparser.ConfigParser()
config.read('keyble.ini')

if 'device' in config and args.pair == None:
    macAddress = config['device']['macAddress']
    userId = int(config['device']['userId'])
    deviceKey = unhexlify(config['device']['deviceKey'])
    logging.info("Config file read, macAddress=%s, userId=%d", macAddress, userId)
else:
    logging.debug("Config file read, no connection info found")
    if args.pair == None:
        qrCodeString = input("Please scan the pairing QR code. Long press the unlock button to enable pairing mode. Then enter the scanned data from QR code (should start with letter M)\nQR Data: ")
    else:
        qrCodeString = args.pair
    pairingData = parse_pairing_code(qrCodeString)
    macAddress = pairingData['mac']
    config.add_section('device')
    config.set('device', 'macAddress', macAddress)
    userId = 0xff; deviceKey = None

def saveconfig():
    with open('keyble.ini', 'w') as configfile:
        config.write(configfile)


logging.debug("Initializing DeviceManager...")
manager = gatt.DeviceManager(adapter_name=args.adapter)
logging.debug("Done")

class AnyDevice(gatt.Device):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.resend_ack_timer = None
    def connect_succeeded(self):
        super().connect_succeeded()
        logging.debug("[%s] Connected" % (self.mac_address))

    def connect_failed(self, error):
        global exitcode
        super().connect_failed(error)
        logging.error("[%s] Connection failed: %s" % (self.mac_address, str(error)))
        exitcode=EXITCODE_CONNECT_FAILED
        manager.stop()

    def disconnect_succeeded(self):
        global exitcode
        super().disconnect_succeeded()
        logging.info("[%s] Disconnected" % (self.mac_address))
        if exitcode==EXITCODE_UNKNOWN: exitcode=EXITCODE_DISCONNECT_WITHOUT_ACTION
        manager.stop()

    def services_resolved(self):
        super().services_resolved()

        self.fragments_to_send = []
        self.defrag = Defragmenter()
        self.cryptoMgr = CryptoMgr(deviceKey)

        logging.debug("[%s] Resolved services" % (self.mac_address))
        for service in self.services:
            logging.debug("[%s]  Service [%s]" % (self.mac_address, service.uuid))
            for characteristic in service.characteristics:
                logging.debug("[%s]    Characteristic [%s]" % (self.mac_address, characteristic.uuid))
        

        keyble_service = next(
            s for s in self.services
            if s.uuid == '58e06900-15d8-11e6-b737-0002a5d5c51b')

        self.tx_characteristic = next(
            c for c in keyble_service.characteristics
            if c.uuid == '3141dd40-15db-11e6-a24b-0002a5d5c51b')
        rx_characteristic = next(
            c for c in keyble_service.characteristics
            if c.uuid == '359d4820-15db-11e6-82bd-0002a5d5c51b')
        rx_characteristic.enable_notifications()

        
        self.send_command(ConnectionRequestCommand(userId, self.cryptoMgr.applicationNonce))
    
    def send_command(self, command):
         logging.debug("> Cmd  %s  %s" , command , command.serialize().hex())
         if is_encrypted_command_type(command.getCommandType()):
             #print("")
             #print("java testcryptomgr "+command.getCommandData().hex()+" "+self.cryptoMgr.deviceNonce.hex()+" "+self.cryptoMgr.applicationNonce.hex()+" "+self.cryptoMgr.pairingKey.hex())
             command = self.cryptoMgr.encrypt_packet(command)
             logging.debug("> Encrypted %s",command)
         fragments = fragment_command(command)
         #for fragment in fragments:
         #    self.tx_characteristic.write_value(fragment)
         self.fragments_to_send.extend(fragments)
         self.send_next_fragment()
        
    def send_next_fragment(self):
        frag = self.fragments_to_send.pop(0)
        logging.debug("> Frag %s",hexlify(frag))
        self.tx_characteristic.write_value(frag)

    def resend_ack(self):
        logging.debug("Resending ACK")
        self.send_command(self.last_ack)
        return True

    def characteristic_value_updated(self, characteristic, value):
        if self.resend_ack_timer:
            GObject.source_remove(self.resend_ack_timer)
            self.resend_ack_timer = None
        logging.debug("< Frag %s", hexlify(value))
        sendAck, packetData = self.defrag.handle(value)
        if sendAck:
            self.last_ack = FragmentAckCommand(value[0])
            self.send_command(self.last_ack)
            self.resend_ack_timer = GObject.timeout_add(400, self.resend_ack)
        if packetData:
            command, raw_data = parse_command(packetData, self.cryptoMgr)
            logging.debug("< Raw packet: %s",hexlify(raw_data))
            self.handle_command(command)

    def action_timeout(self):
        logging.warning("Timeout, disconnecting")
        ##self.disconnect()
        manager.stop()
        return False

    def statusinterval_timeout(self):
        logging.debug("Requesting status info")
        self.send_command(StatusRequestCommand())
        return True

    def on_conn_success(self):
        global exitcode
        no_action=False
        timeout_delay=2500
        if args.open:
            self.send_command(RawCommand.COMMAND_OPEN)
        elif args.unlock:
            self.send_command(RawCommand.COMMAND_UNLOCK)
        elif args.lock:
            self.send_command(RawCommand.COMMAND_LOCK)
        elif args.status_interval:
            self.send_command(StatusRequestCommand())
            GObject.timeout_add(args.status_interval, self.statusinterval_timeout)
        elif args.status:
            self.send_command(StatusRequestCommand())
        elif args.user_list:
            self.send_command(RawCommand.USER_LIST_REQUEST)
            timeout_delay=5000
        elif args.send_raw:
            bd=unhexlify(args.send_raw)
            self.send_command(RawCommand(bd[0], bd[1:]))
        else: 
            no_action=True
        if args.notify:
            logging.debug("Waiting for further status info")
            cancel_global_timeout()
        if not no_action:
            self.action_timeout_id = GObject.timeout_add(timeout_delay, self.action_timeout)
        exitcode=EXITCODE_SUCCESS
        #self.send_command(RawCommand.COMMAND_OPEN)
        #self.send_command(StatusRequestCommand())
        #self.send_command(UserNameSetCommand(userId, "l33t h4xx0r"))

    def handle_command(self, command):
        global exitcode
        logging.debug("< Cmd %s",command )
        if isinstance(command, FragmentAckCommand):
            self.send_next_fragment()
        if isinstance(command, ConnectionInfoCommand):
            self.cryptoMgr.deviceNonce = command.deviceNonce
            if command.pairingCtr == 0xff:
                logging.info("ERROR: connection failed\nto pair device, push the UNLOCK button until LED flashes, then try again")
            if command.pairingCtr == userId:
                # already connected/paired
                self.on_conn_success()
            else:
                # pairing required:
                logging.info("Starting pairing process ...")
                req=self.cryptoMgr.generate_pairing_request(command.pairingCtr, pairingData['key'])
                config['device']['userId'] = str(command.pairingCtr)
                config['device']['deviceKey'] = self.cryptoMgr.pairingKey.hex()
                #print("my output:",req)
                #print("java testcryptomgr "+pairingData['key'].hex()+" "+self.cryptoMgr.deviceNonce.hex()+" "+self.cryptoMgr.applicationNonce.hex()+" "+self.cryptoMgr.pairingKey.hex())
                
                #d=input("Java output? ").split(":")
                #req=PairingRequestCommand(req.pairingCtr, bytes.fromhex(d[0]), req.securityCounter, bytes.fromhex(d[1])) 
                self.send_command(req)
        if isinstance(command, AnswerWithoutSecurityCommand):
            if command.isSuccess():
                logging.info("Pairing succeeded!")
                saveconfig()
                self.on_conn_success()
            else:
                logging.error("ERROR: Pairing failed, wrong key/pairing not enabled?")
                exitcode=EXITCODE_PAIRING_FAILED
                self.disconnect()
        if command.getCommandType() == CommandTypes.STATUS_CHANGED_NOTIFICATION:
            logging.debug("Status has changed, requesting status information")
            self.send_command(StatusRequestCommand())
        if isinstance(command, UserListInfoCommand):
            GObject.source_remove(self.action_timeout_id)
            exitcode=EXITCODE_SUCCESS
            logging.info("User list received")
            for user in command.user_list:
                logging.info("% 2d  % -10s  %s", user["userNumber"], UserListInfoCommand.MODES_STRINGS[user["mode"]], user["name"])
            self.disconnect()
        if isinstance(command, StatusInfoCommand):
            GObject.source_remove(self.action_timeout_id)
            exitcode=EXITCODE_SUCCESS
            logging.info("Status info received:\n"+command.display())
            if not args.notify:
                logging.info("Received status info, disconnecting")
                self.disconnect()


#firmware_version_characteristic.read_value()

def global_timeout():
    logging.warning("Timeout reached, exiting")
    sys.exit(EXITCODE_TIMEOUT)
def cancel_global_timeout():
    GObject.source_remove(global_timeout_id)
global_timeout_id = GObject.timeout_add(args.timeout*1000, global_timeout)


logging.debug("Initializing BT device class...")
device = AnyDevice(mac_address=macAddress, manager=manager)
logging.debug("Connecting...")
device.connect()
logging.debug("Running BT device manager...")
manager.run()

sys.exit(exitcode)
